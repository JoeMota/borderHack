// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  username           String           @unique
  password           String
  email              String           @unique
  userType           String
  hasCompletedSetup  Boolean          @default(false)
  skills             String?
  strengths          String?
  preferredCategories String[]
  rating             Float            @default(0)
  completedJobs      Int              @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  jobsPosted         Job[]            @relation("EmployerJobs")
  jobApplications    JobApplication[] @relation("EmployeeApplications")
  reviewsReceived    Review[]         @relation("ReviewsReceived")
  reviewsGiven       Review[]         @relation("ReviewsGiven")
  tokens             Token[]          // Add this line
}

model Job {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  category        String
  amount          Float
  paymentMethod   String
  location        String
  estimatedTime   Int
  deadline        DateTime
  status          String           @default("open")
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  employer        User             @relation("EmployerJobs", fields: [employerId], references: [id])
  employerId      Int
  jobApplications JobApplication[]
}

model JobApplication {
  id         Int      @id @default(autoincrement())
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      Int
  employee   User     @relation("EmployeeApplications", fields: [employeeId], references: [id])
  employeeId Int

  @@unique([jobId, employeeId])
}

model Review {
  id           Int      @id @default(autoincrement())
  rating       Float
  comment      String
  createdAt    DateTime @default(now())
  reviewer     User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewerId   Int
  reviewee     User     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  revieweeId   Int
}

model Token {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}